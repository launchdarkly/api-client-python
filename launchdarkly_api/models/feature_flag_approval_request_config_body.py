# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from launchdarkly_api.models.semantic_patch_instruction import SemanticPatchInstruction  # noqa: F401,E501


class FeatureFlagApprovalRequestConfigBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'instructions': 'SemanticPatchInstruction',
        'notify_member_ids': 'list[str]',
        'comment': 'str'
    }

    attribute_map = {
        'description': 'description',
        'instructions': 'instructions',
        'notify_member_ids': 'notifyMemberIds',
        'comment': 'comment'
    }

    def __init__(self, description=None, instructions=None, notify_member_ids=None, comment=None):  # noqa: E501
        """FeatureFlagApprovalRequestConfigBody - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._instructions = None
        self._notify_member_ids = None
        self._comment = None
        self.discriminator = None

        self.description = description
        self.instructions = instructions
        self.notify_member_ids = notify_member_ids
        if comment is not None:
            self.comment = comment

    @property
    def description(self):
        """Gets the description of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501

        A name that describes the changes you would like to apply to a feature flag configuration  # noqa: E501

        :return: The description of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeatureFlagApprovalRequestConfigBody.

        A name that describes the changes you would like to apply to a feature flag configuration  # noqa: E501

        :param description: The description of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def instructions(self):
        """Gets the instructions of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501


        :return: The instructions of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :rtype: SemanticPatchInstruction
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this FeatureFlagApprovalRequestConfigBody.


        :param instructions: The instructions of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :type: SemanticPatchInstruction
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def notify_member_ids(self):
        """Gets the notify_member_ids of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501


        :return: The notify_member_ids of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._notify_member_ids

    @notify_member_ids.setter
    def notify_member_ids(self, notify_member_ids):
        """Sets the notify_member_ids of this FeatureFlagApprovalRequestConfigBody.


        :param notify_member_ids: The notify_member_ids of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :type: list[str]
        """
        if notify_member_ids is None:
            raise ValueError("Invalid value for `notify_member_ids`, must not be `None`")  # noqa: E501

        self._notify_member_ids = notify_member_ids

    @property
    def comment(self):
        """Gets the comment of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501

        comment will be included in audit log item for change.  # noqa: E501

        :return: The comment of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this FeatureFlagApprovalRequestConfigBody.

        comment will be included in audit log item for change.  # noqa: E501

        :param comment: The comment of this FeatureFlagApprovalRequestConfigBody.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureFlagApprovalRequestConfigBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureFlagApprovalRequestConfigBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

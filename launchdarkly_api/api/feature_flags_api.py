# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API  # noqa: E501

    OpenAPI spec version: 5.0.3
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from launchdarkly_api.api_client import ApiClient


class FeatureFlagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_feature_flag(self, project_key, feature_flag_key, feature_flag_copy_body, **kwargs):  # noqa: E501
        """Copies the feature flag configuration from one environment to the same feature flag in another environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_feature_flag(project_key, feature_flag_key, feature_flag_copy_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param FeatureFlagCopyBody feature_flag_copy_body: Copy feature flag configurations between environments. (required)
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_feature_flag_with_http_info(project_key, feature_flag_key, feature_flag_copy_body, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_feature_flag_with_http_info(project_key, feature_flag_key, feature_flag_copy_body, **kwargs)  # noqa: E501
            return data

    def copy_feature_flag_with_http_info(self, project_key, feature_flag_key, feature_flag_copy_body, **kwargs):  # noqa: E501
        """Copies the feature flag configuration from one environment to the same feature flag in another environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_feature_flag_with_http_info(project_key, feature_flag_key, feature_flag_copy_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param FeatureFlagCopyBody feature_flag_copy_body: Copy feature flag configurations between environments. (required)
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'feature_flag_copy_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `copy_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `copy_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_copy_body' is set
        if ('feature_flag_copy_body' not in params or
                params['feature_flag_copy_body'] is None):
            raise ValueError("Missing the required parameter `feature_flag_copy_body` when calling `copy_feature_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_flag_copy_body' in params:
            body_params = params['feature_flag_copy_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_approval_request(self, project_key, environment_key, feature_flag_key, approval_request_id, **kwargs):  # noqa: E501
        """Delete an approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_approval_request(project_key, environment_key, feature_flag_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestConfigBody approval_request_config_body: Create a new approval request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_approval_request_with_http_info(project_key, environment_key, feature_flag_key, approval_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_approval_request_with_http_info(project_key, environment_key, feature_flag_key, approval_request_id, **kwargs)  # noqa: E501
            return data

    def delete_approval_request_with_http_info(self, project_key, environment_key, feature_flag_key, approval_request_id, **kwargs):  # noqa: E501
        """Delete an approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_approval_request_with_http_info(project_key, environment_key, feature_flag_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestConfigBody approval_request_config_body: Create a new approval request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'feature_flag_key', 'approval_request_id', 'approval_request_config_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `delete_approval_request`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `delete_approval_request`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `delete_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_id' is set
        if ('approval_request_id' not in params or
                params['approval_request_id'] is None):
            raise ValueError("Missing the required parameter `approval_request_id` when calling `delete_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'approval_request_id' in params:
            path_params['approvalRequestId'] = params['approval_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'approval_request_config_body' in params:
            body_params = params['approval_request_config_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_flag(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_flag(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_flag_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_flag_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
            return data

    def delete_feature_flag_with_http_info(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_flag_with_http_info(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `delete_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `delete_feature_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_flag_config_scheduled_changes(self, project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Delete a scheduled change on a feature flag in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_flag_config_scheduled_changes(project_key, feature_flag_key, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
            return data

    def delete_flag_config_scheduled_changes_with_http_info(self, project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Delete a scheduled change on a feature flag in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'scheduled_change_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_flag_config_scheduled_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `delete_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `delete_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `delete_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'scheduled_change_id' is set
        if ('scheduled_change_id' not in params or
                params['scheduled_change_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_change_id` when calling `delete_flag_config_scheduled_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'scheduled_change_id' in params:
            path_params['scheduledChangeId'] = params['scheduled_change_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_approval_request(self, project_key, feature_flag_key, environment_key, approval_request_id, **kwargs):  # noqa: E501
        """Get a single approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request(project_key, feature_flag_key, environment_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, **kwargs)  # noqa: E501
            return data

    def get_approval_request_with_http_info(self, project_key, feature_flag_key, environment_key, approval_request_id, **kwargs):  # noqa: E501
        """Get a single approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'approval_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_id' is set
        if ('approval_request_id' not in params or
                params['approval_request_id'] is None):
            raise ValueError("Missing the required parameter `approval_request_id` when calling `get_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'approval_request_id' in params:
            path_params['approvalRequestId'] = params['approval_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_approval_requests(self, project_key, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Get all approval requests for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_requests(project_key, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_approval_requests_with_http_info(project_key, feature_flag_key, environment_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_approval_requests_with_http_info(project_key, feature_flag_key, environment_key, **kwargs)  # noqa: E501
            return data

    def get_approval_requests_with_http_info(self, project_key, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Get all approval requests for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_approval_requests_with_http_info(project_key, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_approval_requests" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_approval_requests`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_approval_requests`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_approval_requests`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_expiring_user_targets(self, project_key, environment_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get expiring user targets for feature flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expiring_user_targets(project_key, environment_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: UserTargetingExpirationForFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, **kwargs)  # noqa: E501
            return data

    def get_expiring_user_targets_with_http_info(self, project_key, environment_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get expiring user targets for feature flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: UserTargetingExpirationForFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'feature_flag_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_expiring_user_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_expiring_user_targets`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_expiring_user_targets`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_expiring_user_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserTargetingExpirationForFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_flag(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get a single feature flag by key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param list[str] env: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_flag_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_flag_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
            return data

    def get_feature_flag_with_http_info(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get a single feature flag by key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_with_http_info(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param list[str] env: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'env']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_feature_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []
        if 'env' in params:
            query_params.append(('env', params['env']))  # noqa: E501
            collection_formats['env'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_flag_status(self, project_key, environment_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get the status for a particular feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_status(project_key, environment_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: FeatureFlagStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_flag_status_with_http_info(project_key, environment_key, feature_flag_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_flag_status_with_http_info(project_key, environment_key, feature_flag_key, **kwargs)  # noqa: E501
            return data

    def get_feature_flag_status_with_http_info(self, project_key, environment_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get the status for a particular feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_status_with_http_info(project_key, environment_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: FeatureFlagStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'feature_flag_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_flag_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_feature_flag_status`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_feature_flag_status`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_feature_flag_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_flag_status_across_environments(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get the status for a particular feature flag across environments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_status_across_environments(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: FeatureFlagStatusAcrossEnvironments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_flag_status_across_environments_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_flag_status_across_environments_with_http_info(project_key, feature_flag_key, **kwargs)  # noqa: E501
            return data

    def get_feature_flag_status_across_environments_with_http_info(self, project_key, feature_flag_key, **kwargs):  # noqa: E501
        """Get the status for a particular feature flag across environments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_status_across_environments_with_http_info(project_key, feature_flag_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: FeatureFlagStatusAcrossEnvironments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_flag_status_across_environments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_feature_flag_status_across_environments`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_feature_flag_status_across_environments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flag-status/{projectKey}/{featureFlagKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagStatusAcrossEnvironments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_flag_statuses(self, project_key, environment_key, **kwargs):  # noqa: E501
        """Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_statuses(project_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagStatuses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_flag_statuses_with_http_info(project_key, environment_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_flag_statuses_with_http_info(project_key, environment_key, **kwargs)  # noqa: E501
            return data

    def get_feature_flag_statuses_with_http_info(self, project_key, environment_key, **kwargs):  # noqa: E501
        """Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flag_statuses_with_http_info(project_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagStatuses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_flag_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_feature_flag_statuses`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_feature_flag_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flag-statuses/{projectKey}/{environmentKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagStatuses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_flags(self, project_key, **kwargs):  # noqa: E501
        """Get a list of all features in the given project.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flags(project_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param list[str] env: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.
        :param bool summary: By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.
        :param bool archived: When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
        :param float limit: The number of objects to return. Defaults to -1, which returns everything.
        :param float offset: Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
        :param str filter: A comma-separated list of filters. Each filter is of the form field:value.
        :param str sort: A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
        :param str tag: Filter by tag. A tag can be used to group flags across projects.
        :return: FeatureFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_flags_with_http_info(project_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_flags_with_http_info(project_key, **kwargs)  # noqa: E501
            return data

    def get_feature_flags_with_http_info(self, project_key, **kwargs):  # noqa: E501
        """Get a list of all features in the given project.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_flags_with_http_info(project_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param list[str] env: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.
        :param bool summary: By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.
        :param bool archived: When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
        :param float limit: The number of objects to return. Defaults to -1, which returns everything.
        :param float offset: Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
        :param str filter: A comma-separated list of filters. Each filter is of the form field:value.
        :param str sort: A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
        :param str tag: Filter by tag. A tag can be used to group flags across projects.
        :return: FeatureFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'env', 'summary', 'archived', 'limit', 'offset', 'filter', 'sort', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_flags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_feature_flags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501

        query_params = []
        if 'env' in params:
            query_params.append(('env', params['env']))  # noqa: E501
            collection_formats['env'] = 'multi'  # noqa: E501
        if 'summary' in params:
            query_params.append(('summary', params['summary']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_flag_config_scheduled_change(self, project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Get a scheduled change on a feature flag by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_change(project_key, feature_flag_key, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
            return data

    def get_flag_config_scheduled_change_with_http_info(self, project_key, feature_flag_key, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Get a scheduled change on a feature flag by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'scheduled_change_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flag_config_scheduled_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'scheduled_change_id' is set
        if ('scheduled_change_id' not in params or
                params['scheduled_change_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_change_id` when calling `get_flag_config_scheduled_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'scheduled_change_id' in params:
            path_params['scheduledChangeId'] = params['scheduled_change_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagScheduledChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_flag_config_scheduled_changes(self, project_key, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Get all scheduled workflows for a feature flag by key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_changes(project_key, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagScheduledChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, **kwargs)  # noqa: E501
            return data

    def get_flag_config_scheduled_changes_with_http_info(self, project_key, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Get all scheduled workflows for a feature flag by key.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_changes_with_http_info(project_key, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagScheduledChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flag_config_scheduled_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_flag_config_scheduled_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagScheduledChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_flag_config_scheduled_changes_conflicts(self, project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, **kwargs):  # noqa: E501
        """Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_changes_conflicts(project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param FlagConfigScheduledChangesConflictsBody flag_config_scheduled_changes_conflicts_body: Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag. (required)
        :return: FeatureFlagScheduledChangesConflicts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_flag_config_scheduled_changes_conflicts_with_http_info(project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_flag_config_scheduled_changes_conflicts_with_http_info(project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, **kwargs)  # noqa: E501
            return data

    def get_flag_config_scheduled_changes_conflicts_with_http_info(self, project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, **kwargs):  # noqa: E501
        """Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_flag_config_scheduled_changes_conflicts_with_http_info(project_key, feature_flag_key, environment_key, flag_config_scheduled_changes_conflicts_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param FlagConfigScheduledChangesConflictsBody flag_config_scheduled_changes_conflicts_body: Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag. (required)
        :return: FeatureFlagScheduledChangesConflicts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'flag_config_scheduled_changes_conflicts_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flag_config_scheduled_changes_conflicts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_flag_config_scheduled_changes_conflicts`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_flag_config_scheduled_changes_conflicts`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_flag_config_scheduled_changes_conflicts`")  # noqa: E501
        # verify the required parameter 'flag_config_scheduled_changes_conflicts_body' is set
        if ('flag_config_scheduled_changes_conflicts_body' not in params or
                params['flag_config_scheduled_changes_conflicts_body'] is None):
            raise ValueError("Missing the required parameter `flag_config_scheduled_changes_conflicts_body` when calling `get_flag_config_scheduled_changes_conflicts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flag_config_scheduled_changes_conflicts_body' in params:
            body_params = params['flag_config_scheduled_changes_conflicts_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagScheduledChangesConflicts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_expiring_user_targets(self, project_key, environment_key, feature_flag_key, semantic_patch_with_comment, **kwargs):  # noqa: E501
        """Update, add, or delete expiring user targets on feature flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_expiring_user_targets(project_key, environment_key, feature_flag_key, semantic_patch_with_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param object semantic_patch_with_comment: Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported. (required)
        :return: UserTargetingExpirationForFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, semantic_patch_with_comment, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, semantic_patch_with_comment, **kwargs)  # noqa: E501
            return data

    def patch_expiring_user_targets_with_http_info(self, project_key, environment_key, feature_flag_key, semantic_patch_with_comment, **kwargs):  # noqa: E501
        """Update, add, or delete expiring user targets on feature flag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_expiring_user_targets_with_http_info(project_key, environment_key, feature_flag_key, semantic_patch_with_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param object semantic_patch_with_comment: Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported. (required)
        :return: UserTargetingExpirationForFlags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'feature_flag_key', 'semantic_patch_with_comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_expiring_user_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `patch_expiring_user_targets`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `patch_expiring_user_targets`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `patch_expiring_user_targets`")  # noqa: E501
        # verify the required parameter 'semantic_patch_with_comment' is set
        if ('semantic_patch_with_comment' not in params or
                params['semantic_patch_with_comment'] is None):
            raise ValueError("Missing the required parameter `semantic_patch_with_comment` when calling `patch_expiring_user_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'semantic_patch_with_comment' in params:
            body_params = params['semantic_patch_with_comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserTargetingExpirationForFlags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_feature_flag(self, project_key, feature_flag_key, patch_comment, **kwargs):  # noqa: E501
        """Perform a partial update to a feature.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_feature_flag(project_key, feature_flag_key, patch_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param PatchComment patch_comment: Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported. (required)
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_feature_flag_with_http_info(project_key, feature_flag_key, patch_comment, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_feature_flag_with_http_info(project_key, feature_flag_key, patch_comment, **kwargs)  # noqa: E501
            return data

    def patch_feature_flag_with_http_info(self, project_key, feature_flag_key, patch_comment, **kwargs):  # noqa: E501
        """Perform a partial update to a feature.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_feature_flag_with_http_info(project_key, feature_flag_key, patch_comment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param PatchComment patch_comment: Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported. (required)
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'patch_comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `patch_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `patch_feature_flag`")  # noqa: E501
        # verify the required parameter 'patch_comment' is set
        if ('patch_comment' not in params or
                params['patch_comment'] is None):
            raise ValueError("Missing the required parameter `patch_comment` when calling `patch_feature_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patch_comment' in params:
            body_params = params['patch_comment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}/{featureFlagKey}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_flag_config_scheduled_change(self, project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Updates an existing scheduled-change on a feature flag in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_flag_config_scheduled_change(project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param FlagConfigScheduledChangesPatchBody flag_config_scheduled_changes_patch_body: Update scheduled changes on a feature flag. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, **kwargs)  # noqa: E501
            return data

    def patch_flag_config_scheduled_change_with_http_info(self, project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, **kwargs):  # noqa: E501
        """Updates an existing scheduled-change on a feature flag in an environment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_flag_config_scheduled_change_with_http_info(project_key, feature_flag_key, flag_config_scheduled_changes_patch_body, environment_key, scheduled_change_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param FlagConfigScheduledChangesPatchBody flag_config_scheduled_changes_patch_body: Update scheduled changes on a feature flag. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str scheduled_change_id: The id of the scheduled change (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'flag_config_scheduled_changes_patch_body', 'environment_key', 'scheduled_change_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_flag_config_scheduled_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `patch_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `patch_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'flag_config_scheduled_changes_patch_body' is set
        if ('flag_config_scheduled_changes_patch_body' not in params or
                params['flag_config_scheduled_changes_patch_body'] is None):
            raise ValueError("Missing the required parameter `flag_config_scheduled_changes_patch_body` when calling `patch_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `patch_flag_config_scheduled_change`")  # noqa: E501
        # verify the required parameter 'scheduled_change_id' is set
        if ('scheduled_change_id' not in params or
                params['scheduled_change_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_change_id` when calling `patch_flag_config_scheduled_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'scheduled_change_id' in params:
            path_params['scheduledChangeId'] = params['scheduled_change_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flag_config_scheduled_changes_patch_body' in params:
            body_params = params['flag_config_scheduled_changes_patch_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagScheduledChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_apply_approval_request(self, project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, **kwargs):  # noqa: E501
        """Apply approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_apply_approval_request(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestApplyConfigBody approval_request_apply_config_body: Apply an approval request (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_apply_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_apply_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, **kwargs)  # noqa: E501
            return data

    def post_apply_approval_request_with_http_info(self, project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, **kwargs):  # noqa: E501
        """Apply approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_apply_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_apply_config_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestApplyConfigBody approval_request_apply_config_body: Apply an approval request (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'approval_request_id', 'approval_request_apply_config_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_apply_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `post_apply_approval_request`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `post_apply_approval_request`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `post_apply_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_id' is set
        if ('approval_request_id' not in params or
                params['approval_request_id'] is None):
            raise ValueError("Missing the required parameter `approval_request_id` when calling `post_apply_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_apply_config_body' is set
        if ('approval_request_apply_config_body' not in params or
                params['approval_request_apply_config_body'] is None):
            raise ValueError("Missing the required parameter `approval_request_apply_config_body` when calling `post_apply_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'approval_request_id' in params:
            path_params['approvalRequestId'] = params['approval_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'approval_request_apply_config_body' in params:
            body_params = params['approval_request_apply_config_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_approval_request(self, project_key, feature_flag_key, environment_key, approval_request_id, **kwargs):  # noqa: E501
        """Create an approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_approval_request(project_key, feature_flag_key, environment_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestConfigBody approval_request_config_body: Create a new approval request
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, **kwargs)  # noqa: E501
            return data

    def post_approval_request_with_http_info(self, project_key, feature_flag_key, environment_key, approval_request_id, **kwargs):  # noqa: E501
        """Create an approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestConfigBody approval_request_config_body: Create a new approval request
        :return: ApprovalRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'approval_request_id', 'approval_request_config_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `post_approval_request`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `post_approval_request`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `post_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_id' is set
        if ('approval_request_id' not in params or
                params['approval_request_id'] is None):
            raise ValueError("Missing the required parameter `approval_request_id` when calling `post_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'approval_request_id' in params:
            path_params['approvalRequestId'] = params['approval_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'approval_request_config_body' in params:
            body_params = params['approval_request_config_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_feature_flag(self, project_key, feature_flag_body, **kwargs):  # noqa: E501
        """Creates a new feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_feature_flag(project_key, feature_flag_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param FeatureFlagBody feature_flag_body: Create a new feature flag. (required)
        :param str clone: The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_feature_flag_with_http_info(project_key, feature_flag_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_feature_flag_with_http_info(project_key, feature_flag_body, **kwargs)  # noqa: E501
            return data

    def post_feature_flag_with_http_info(self, project_key, feature_flag_body, **kwargs):  # noqa: E501
        """Creates a new feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_feature_flag_with_http_info(project_key, feature_flag_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param FeatureFlagBody feature_flag_body: Create a new feature flag. (required)
        :param str clone: The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
        :return: FeatureFlag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_body', 'clone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_feature_flag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `post_feature_flag`")  # noqa: E501
        # verify the required parameter 'feature_flag_body' is set
        if ('feature_flag_body' not in params or
                params['feature_flag_body'] is None):
            raise ValueError("Missing the required parameter `feature_flag_body` when calling `post_feature_flag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501

        query_params = []
        if 'clone' in params:
            query_params.append(('clone', params['clone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_flag_body' in params:
            body_params = params['feature_flag_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/flags/{projectKey}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_flag_config_scheduled_changes(self, project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Creates a new scheduled change for a feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_flag_config_scheduled_changes(project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param FlagConfigScheduledChangesPostBody flag_config_scheduled_changes_post_body: Create scheduled changes on a feature flag. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_flag_config_scheduled_changes_with_http_info(project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_flag_config_scheduled_changes_with_http_info(project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, **kwargs)  # noqa: E501
            return data

    def post_flag_config_scheduled_changes_with_http_info(self, project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, **kwargs):  # noqa: E501
        """Creates a new scheduled change for a feature flag.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_flag_config_scheduled_changes_with_http_info(project_key, flag_config_scheduled_changes_post_body, feature_flag_key, environment_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param FlagConfigScheduledChangesPostBody flag_config_scheduled_changes_post_body: Create scheduled changes on a feature flag. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :return: FeatureFlagScheduledChange
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'flag_config_scheduled_changes_post_body', 'feature_flag_key', 'environment_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_flag_config_scheduled_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `post_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'flag_config_scheduled_changes_post_body' is set
        if ('flag_config_scheduled_changes_post_body' not in params or
                params['flag_config_scheduled_changes_post_body'] is None):
            raise ValueError("Missing the required parameter `flag_config_scheduled_changes_post_body` when calling `post_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `post_flag_config_scheduled_changes`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `post_flag_config_scheduled_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flag_config_scheduled_changes_post_body' in params:
            body_params = params['flag_config_scheduled_changes_post_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureFlagScheduledChange',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_review_approval_request(self, project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, **kwargs):  # noqa: E501
        """Review approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_review_approval_request(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestReviewConfigBody approval_request_review_config_body: Review an approval request (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_review_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_review_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, **kwargs)  # noqa: E501
            return data

    def post_review_approval_request_with_http_info(self, project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, **kwargs):  # noqa: E501
        """Review approval request for a feature flag config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_review_approval_request_with_http_info(project_key, feature_flag_key, environment_key, approval_request_id, approval_request_review_config_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param str environment_key: The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
        :param str approval_request_id: The approval request ID (required)
        :param ApprovalRequestReviewConfigBody approval_request_review_config_body: Review an approval request (required)
        :return: ApprovalRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'feature_flag_key', 'environment_key', 'approval_request_id', 'approval_request_review_config_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_review_approval_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params or
                params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `post_review_approval_request`")  # noqa: E501
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params or
                params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `post_review_approval_request`")  # noqa: E501
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params or
                params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `post_review_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_id' is set
        if ('approval_request_id' not in params or
                params['approval_request_id'] is None):
            raise ValueError("Missing the required parameter `approval_request_id` when calling `post_review_approval_request`")  # noqa: E501
        # verify the required parameter 'approval_request_review_config_body' is set
        if ('approval_request_review_config_body' not in params or
                params['approval_request_review_config_body'] is None):
            raise ValueError("Missing the required parameter `approval_request_review_config_body` when calling `post_review_approval_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']  # noqa: E501
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']  # noqa: E501
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']  # noqa: E501
        if 'approval_request_id' in params:
            path_params['approvalRequestId'] = params['approval_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'approval_request_review_config_body' in params:
            body_params = params['approval_request_review_config_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApprovalRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
